# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/hyper_p_opt.ipynb (unless otherwise specified).

__all__ = ['fit_predict']

# Cell
# imports
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
import torchvision
from PIL import Image
from torch.nn.functional import cosine_similarity, adaptive_avg_pool2d
from torch.optim import Adam, SGD
from torch.optim.lr_scheduler import StepLR
from sklearn.metrics import roc_auc_score
import pandas as pd
from functools import partial
from hyperopt import fmin, tpe, hp, Trials, STATUS_OK
from hyperopt.pyll.base import scope
import json
from datetime import datetime
import os
import time

# from datasets import FaceClassificationDataset, FaceVerificationDataset
# from losses import CenterLoss
# from models.mobilenet import *
# from models.resnet import *
from .datasets import FaceClassificationDataset, FaceVerificationDataset
from .losses import CenterLoss
from .models.resnet import *

# Cell
def fit_predict(mc, verbose, trials=None):

    assert mc['model'] in ['resnet18', 'resnet34', 'resnet50', 'mobilenet']

    train_loader, clf_loader, vrf_loader = create_dataloaders(mc)

    print(f'\nCurrent directory: {os.getcwd()}\n')
    now = datetime.now().strftime("%d-%m-%y_%H-%M-%S")
    print(now)

    start_time = time.time()
    print('='*26)
    print(pd.Series(mc))
    print('='*26+'\n')

    if  mc['model'] == 'resnet18': resnet_n_layers = 18
    if  mc['model'] == 'resnet34': resnet_n_layers = 34
    if  mc['model'] == 'resnet50': resnet_n_layers = 50

    model = ResNetN(resnet_n_layers,
                    in_channels=mc['in_channels'],
                    n_classes=mc['n_classes'],
                    lr=mc['lr'],
                    lr_decay=mc['lr_decay'],
                    n_lr_decay_steps=mc['n_lr_decay_steps'],
                    center_loss = mc['center_loss'],
                    lr_cl=mc['lr_cl'],
                    alpha_cl=mc['alpha_cl'],
                    n_epochs=mc['n_epochs'],
                    eval_steps=mc['eval_steps'])

    model.fit(train_loader=train_loader,
              val_c_loader=clf_loader,
              val_v_loader=vrf_loader)

    if trials is not None:
        results = {'loss': model.train_loss,
                   'val_c_loss': model.val_c_loss,
                   'train_c_acc': model.train_c_acc,
                   'val_c_acc': model.val_c_acc,
                   'val_v_acc': model.val_v_acc,
                   'mc': mc,
                   'run_time': time.time()-start_time,
                   'trajectories': model.trajectories,
                   'model': model,
                   'time_stamp': now,
                   'status': STATUS_OK}
        return results
    else:
        return model