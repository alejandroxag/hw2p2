# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/datasets.ipynb (unless otherwise specified).

__all__ = ['FaceClassificationDataset']

# Cell
# imports
import os
import numpy as np
import torch
from torch.utils.data import Dataset
import torchvision
from PIL import Image

# Cell
class FaceClassificationDataset(Dataset):
    """ Face Classification Dataset

    Class inheriting from the torch.data.utils.Dataset class.

    Fields
    ------



    Methods
    -------


    """
    def __init__(self,
                 sample=None,
                 mode='train'):

        # Assertions to avoid wrong inputs
        assert mode in ['train', 'val', 'test']
        assert mode == 'test' and 'sample' != None or \
            mode != 'test'
        if sample is not None:
            assert isinstance(sample, (list, np.ndarray))
            assert mode != 'test'

        self.mode = mode

        # Directory setup
        if mode == 'train':
            self.data_dir = '../nbs/data/s1/train_data'
        elif mode == 'val':
            self.data_dir = '../nbs/data/s1/val_data'
        else:
            self.data_dir = '../nbs/data/s1/test_data'

        # Labels
        if (mode == 'train' or mode == 'val'):
            if sample is not None:
                sample = np.array(sample)
                # assert files.sum() + len(files) == \
                #     len(files)*(len(files) + 1)//2
                assert sample.min() >= 0
                self.labels = np.array(sample)
                self.labels.sort(axis=0)
            else:
               self.labels = [int(d) for d in os.listdir(self.data_dir)]
               self.labels = np.array(self.labels)
               self.labels.sort(axis=0)
        else:
            self.labels = os.listdir(self.data_dir)
            self.labels = np.array([int(f.split('.')[0]) for f in self.labels])
            self.labels.sort(axis=0)

        self.map_files = []
        for l in self.labels:
            temp_ls = [(l, f) for f in \
                os.listdir(os.path.join(self.data_dir, str(l)))]
            temp_ls = [(t[0], t[1]) for t in temp_ls]
            self.map_files.append(temp_ls)

        self.map_files = [t for sl in self.map_files for t in sl]
        self.labels = [t[0] for t in self.map_files]
        self.X = [t[1] for t in self.map_files]

    def __len__(self): return len(self.X)

    def __getitem__(self, idx):
        image_path = os.path.join(self.data_dir,
                                  str(self.labels[idx]),
                                  self.X[idx])
        image_tensor = Image.open(image_path)
        image_tensor = torchvision.transforms.ToTensor()(image_tensor)
        if self.mode == 'test': return image_tensor
        else: return image_tensor, self.labels[idx]